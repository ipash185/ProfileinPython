backend.py:

    Class: UniqueIDGenerator
        This class is responsible for generating unique IDs using the uuid module.

        Methods:
            generate_id(self) -> str:
                Generates and returns a new unique ID using uuid.uuid4().

    Class: Person
        This is the base class for both teachers and students. It includes common attributes and methods for all persons.

        Attributes:
            id (str):
                Unique identifier for a person.
            password (str):
                Password for authentication.
            name (str):
                Name of the person.
            age (int):
                Age of the person.

        Methods:
            init(self, name, age, id, password):
                Initializes a Person object with the provided name, age, id, and password.
            get_json(self, file) -> dict:
                Reads and returns JSON data from the specified file.
            update_json(self, file, data):
                Writes the provided data as JSON to the specified file.
            is_valid_password(self, password) -> bool:
                Validates if the given password meets the specified criteria.
            set_data(self, user):
                Sets the data of a Person object based on the provided user dictionary.
                Parameters:
                - user (dict): A dictionary containing user data, such as name, age, id, etc.
            display_person_attributes(self, grid_start_row):
                Displays the common attributes of a Person in a Tkinter frame.
                Parameters:
                - grid_start_row (int): The starting row in the Tkinter frame for displaying attributes.

    Class: Teacher (Inherits from Person)
        This class represents a teacher and includes additional attributes specific to teachers.

        Attributes:
            specialization (str):
                Area of specialization for the teacher.
            experience (int):
                Years of teaching experience.
            projects (list):
                List of projects the teacher has worked on.
            achievements (list):
                List of achievements of the teacher.
            education (str):
                Educational background of the teacher.
            doctoral_advisor (str):
                Name of the teacher's doctoral advisor.

        Methods:
            init(self, name, age, id, password, specialization, experience, projects, achievements, education, doctoral_advisor):
                Initializes a Teacher object with the provided attributes.
            set_data(self, user):
                Sets the data of a Teacher object based on the provided user dictionary.
                Parameters:
                - user (dict): A dictionary containing teacher-specific data.
            display_person_attributes(self, grid_start_row):
                Displays the common attributes of a Person in a Tkinter frame.
                Parameters:
                - grid_start_row (int): The starting row in the Tkinter frame for displaying attributes.

    Class: Student (Inherits from Person)
        This class represents a student and includes additional attributes specific to students.

        Attributes:
            program (str):
                Academic program of the student.
            year (int):
                Current academic year of the student.
            department (str):
                Department of study for the student.
            roll_no (str):
                Roll number of the student.
            cgpa (float):
                Cumulative Grade Point Average of the student.
            achievements (list):
                List of achievements of the student.

        Methods:
            init(self, name, age, id, password, program, year, department, roll_no, cgpa, achievements):
                Initializes a Student object with the provided attributes.
            set_data(self, user):
                Sets the data of a Student object based on the provided user dictionary.
                Parameters:
                - user (dict): A dictionary containing student-specific data.
            display_student_attributes(self, frame, grid_start_row):
                Displays the attributes specific to a Student in a Tkinter frame.
                Parameters:
                - frame (tk.Frame): The Tkinter frame in which attributes will be displayed.
                - grid_start_row (int): The starting row in the Tkinter frame for displaying attributes.

    Class: Undergraduate (Inherits from Student)
        This class represents an undergraduate student and inherits attributes and methods from the Student class.

        Attributes:
            program (str):
                Academic program of the undergraduate student.
            year (int):
                Current academic year of the undergraduate student.
            department (str):
                Department of study for the undergraduate student.
            roll_no (str):
                Roll number of the undergraduate student.
            cgpa (float):
                Cumulative Grade Point Average of the undergraduate student.
            achievements (list):
                List of achievements of the undergraduate student.

        Methods:
            init(self, name, age, id, password, program, year, department, roll_no, cgpa, achievements):
                Initializes an Undergraduate object with the provided attributes.
            set_data(self, user):
                Sets the data of an Undergraduate object based on the provided user dictionary.
                Parameters:
                - user (dict): A dictionary containing undergraduate-specific data.
            display_undergraduate_attributes(self, frame, grid_start_row):
                Displays the attributes specific to an Undergraduate in a Tkinter frame.
                Parameters:
                - frame (tk.Frame): The Tkinter frame in which attributes will be displayed.
                - grid_start_row (int): The starting row in the Tkinter frame for displaying attributes.

    Class: Postgraduate (Inherits from Student)
        This class represents a postgraduate student and inherits attributes and methods from the Student class. It also includes a specialization attribute.

        Attributes:
            specialization (str):
                Area of specialization for the postgraduate student.

        Methods:
            init(self, name, age, id, password, program, specialization, year, department, roll_no, cgpa, achievements):
                Initializes a Postgraduate object with the provided attributes.
            set_data(self, user):
                Sets the data of a Postgraduate object based on the provided user dictionary.
                Parameters:
                - user (dict): A dictionary containing postgraduate-specific data.
            display_postgraduate_attributes(self, frame, grid_start_row):
                Displays the attributes specific to a Postgraduate in a Tkinter frame.
                Parameters:
                - frame (tk.Frame): The Tkinter frame in which attributes will be displayed.
                - grid_start_row (int): The starting row in the Tkinter frame for displaying attributes.

    Example Usage:

        # Creating an instance of UniqueIDGenerator
        id_generator = UniqueIDGenerator()

        # Generating a unique ID
        new_id = id_generator.generate_id()

        # Creating a Teacher instance
        teacher = Teacher(
            name="John Doe",
            age=35,
            id=new_id,
            password="Pass123!",
            specialization="Computer Science",
            experience=10,
            projects=["Project A", "Project B"],
            achievements=["Award X", "Award Y"],
            education="Ph.D. in Computer Science",
            doctoral_advisor="Dr. Smith"
        )

        # Validating a password
        is_valid_password = teacher.is_valid_password("Pass123!")

        # Displaying teacher attributes in a Tkinter window
        root = tk.Tk()
        frame = tk.Frame(root)
        frame.pack()

        teacher.display_person_attributes(0)
        teacher.display_teacher_attributes(frame, 4)

        root.mainloop()


frontend.py:

    Importing Libraries:

        The code imports necessary libraries json and tkinter.

    Global Variables:

        Global variables such as user, user_type, person, teacher, ug, pg, and login_attempts are declared.

    Function Definitions:

        Functions like set_page_data, create_entry, set_edit_page_data, handle_unsuccessful_login, delete_user, showStatusLabel, hideStatusLabel, and clear_input are defined.

        set_page_data(user) is a function for displaying user profile information.
        set_edit_page_data(user) is a function for editing user profile information.
        handle_unsuccessful_login(username) is a function for handling unsuccessful login attempts.
        delete_user(username) is a function for deleting user accounts. User is removed from the database.
        showStatusLabel(message) is a function for displaying status messages.
        hideStatusLabel(label) is a function for hiding status messages.
        clear_input() is a function for clearing entry fields and setting comboboxes to their default values.
        delete_account(user) is a function for deleting user accounts.
        addUser() is a function for adding new user accounts. User is added into the database.
        on_user_type_change(event) is a function for handling user type changes for first combobox.
        on_user_type_change2(event) is a function for handling user type changes for second combobox.
        signuppage() is a function for displaying sign-up page.
        signinpage() is a function for displaying sign-in page.
        signin() is a function for signing in.
        signout() is a function for signing out.
        editprofile(user) is a function for editing user profile.
        saveprofile() is a function for saving user profile. Changes are pushed to the database.

    User Interface (UI) Setup:

        The code creates the main tkinter.Tk window and sets up frames for various sections like sign-up, sign-in, user profile and edit profile.
        Entry widgets, labels, comboboxes, and buttons are placed within these frames for user interaction.

    User Authentication:

        There are functions for signing up, signing in, and handling unsuccessful login attempts.
        The code checks user types (Teacher/Student) and specific program types (Undergraduate/Postgraduate) during sign-up and sign-in.

    Profile Display and Editing:

        User profile information is displayed using labels.
        There is an edit profile feature with corresponding entry widgets for modifying user data.

    Buttons for Navigation:

        Buttons like "Edit," "Sign Out," and "Delete Account" provide user navigation options.

    Event Handling:

        The code binds functions to events, such as combobox selection changes.

    Layout Management:

        The code uses grid layout for organizing UI components within frames.